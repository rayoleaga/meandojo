// This is how we connect to the mongodb database using mongoose -- "basic_mongoose" is the name of our db in mongodb -this should match the name of the db you are going to use for your project.
1.mongoose.connect('mongodb://localhost/basic_mongoose');
**************************************
// create schema
2. var UserSchema = new mongoose.Schema({
 name: String,
 age: Number
});
**************************************
// creates a model called User that will automaticly create Collection called 'users'
2a. var User = mongoose.model('User', UserSchema);
**************************************
2. create form with 'action="/user"' 'method="post"'
**************************************
3.on server.js
	
	3a. app.post('/users', function(req, res) {
  		console.log("POST DATA", req.body);

  // create a new User with the name and age corresponding to those from req.body
  3b. var user = new User({name: req.body.name, age: req.body.age});

  // try to save that new user to the database (this is the method that actually inserts into the db) and run a callback
  function with an error (if any) from the operation.
  	3c. 	user.save(function(err) {

    // if there is an error console.log that something went wrong!
    if(err) {
      console.log('something went wrong');
    } else { // else console.log that we did well and then redirect to the root route
      console.log('successfully added a user!');

      res.redirect('/');
    }
  });
});


**************************************

// gets information from database
4. app.get('/', function(req, res) {
	// finds all the users
	User.find({}, function(err, users){
		res.render('index',{response: users});
		console.log(users);

	});

});




**************************************
FRONT END

// for in loop to display all users from database usin ejs module
<% for (var i in response) { %>
    
       <h3>Name: <%= response[i].name %></h3>
       <h4>Age: <%= response[i].age %></h4><br>
       
   <% } %>

   *****************************MODULARIZATION*********************

   server.js
Always start with your server.js file
The server.js file acts as the home base for your application. This is where you require the routes and the mongoose configurations
The server.js also creates the express application, loads configurations onto it, and then tells it to listen!

server/config/routes.js
This is the file that specifies which routes will be handled and by which controller methods
From routes.js we require the controller file (or files)

server/controllers/quotes.js
This is the file that handles all of the server-side logic. The controller is called upon by the routes.
The controller interacts with preloaded models to run database commands
The controller send the response to the client
There can be many controllers in the server/controllers folder

server/config/mongoose.js
This is the file that connects to the database and loads all of the models
Here we specify a database to connect to and the path where all of our models are
This file is required server.js

server/models/quote.js
This is the file that specifies the schema to be loaded by mongoose
This file is required by mongoose.js
We do not need to require this file in the controller, instead the model itself is loaded from mongoose
There can be many models in the server/models folder

